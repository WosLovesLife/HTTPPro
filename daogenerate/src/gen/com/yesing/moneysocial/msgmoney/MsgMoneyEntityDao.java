package com.yesing.moneysocial.msgmoney;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yesing.moneysocial.msgmoney.MsgMoneyEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG_MONEY_ENTITY".
*/
public class MsgMoneyEntityDao extends AbstractDao<MsgMoneyEntity, Long> {

    public static final String TABLENAME = "MSG_MONEY_ENTITY";

    /**
     * Properties of entity MsgMoneyEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property FromID = new Property(1, String.class, "fromID", false, "FROM_ID");
        public final static Property ToID = new Property(2, String.class, "toID", false, "TO_ID");
        public final static Property Money = new Property(3, String.class, "money", false, "MONEY");
        public final static Property EndTime = new Property(4, Long.class, "endTime", false, "END_TIME");
        public final static Property Created = new Property(5, Long.class, "created", false, "CREATED");
    };


    public MsgMoneyEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MsgMoneyEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG_MONEY_ENTITY\" (" + //
                "\"_ID\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"FROM_ID\" TEXT," + // 1: fromID
                "\"TO_ID\" TEXT," + // 2: toID
                "\"MONEY\" TEXT," + // 3: money
                "\"END_TIME\" INTEGER," + // 4: endTime
                "\"CREATED\" INTEGER);"); // 5: created
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG_MONEY_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MsgMoneyEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String fromID = entity.getFromID();
        if (fromID != null) {
            stmt.bindString(2, fromID);
        }
 
        String toID = entity.getToID();
        if (toID != null) {
            stmt.bindString(3, toID);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(4, money);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime);
        }
 
        Long created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(6, created);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MsgMoneyEntity readEntity(Cursor cursor, int offset) {
        MsgMoneyEntity entity = new MsgMoneyEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fromID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // toID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // money
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // endTime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // created
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MsgMoneyEntity entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFromID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMoney(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCreated(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MsgMoneyEntity entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MsgMoneyEntity entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
