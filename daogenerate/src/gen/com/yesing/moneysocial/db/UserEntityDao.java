package com.yesing.moneysocial.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.yesing.moneysocial.db.UserEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ENTITY".
*/
public class UserEntityDao extends AbstractDao<UserEntity, Integer> {

    public static final String TABLENAME = "USER_ENTITY";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Integer.class, "_id", true, "_ID");
        public final static Property ID = new Property(1, String.class, "ID", false, "ID");
        public final static Property Nike = new Property(2, String.class, "nike", false, "NIKE");
        public final static Property Des = new Property(3, String.class, "des", false, "DES");
        public final static Property HeadImage = new Property(4, String.class, "headImage", false, "HEAD_IMAGE");
        public final static Property BackImage = new Property(5, String.class, "backImage", false, "BACK_IMAGE");
        public final static Property Exp = new Property(6, String.class, "exp", false, "EXP");
        public final static Property Level = new Property(7, String.class, "level", false, "LEVEL");
        public final static Property Confirm = new Property(8, String.class, "confirm", false, "CONFIRM");
        public final static Property Sex = new Property(9, String.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(10, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Video = new Property(11, String.class, "video", false, "VIDEO");
        public final static Property Tags = new Property(12, String.class, "tags", false, "TAGS");
        public final static Property RecentBlogDs = new Property(13, String.class, "recentBlogDs", false, "RECENT_BLOG_DS");
        public final static Property MsgPrice = new Property(14, String.class, "msgPrice", false, "MSG_PRICE");
        public final static Property SpendedMoney = new Property(15, String.class, "spendedMoney", false, "SPENDED_MONEY");
        public final static Property RecivedMoney = new Property(16, String.class, "recivedMoney", false, "RECIVED_MONEY");
        public final static Property CreateData = new Property(17, java.util.Date.class, "createData", false, "CREATE_DATA");
    };


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ENTITY\" (" + //
                "\"_ID\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"ID\" TEXT NOT NULL UNIQUE ," + // 1: ID
                "\"NIKE\" TEXT," + // 2: nike
                "\"DES\" TEXT," + // 3: des
                "\"HEAD_IMAGE\" TEXT," + // 4: headImage
                "\"BACK_IMAGE\" TEXT," + // 5: backImage
                "\"EXP\" TEXT," + // 6: exp
                "\"LEVEL\" TEXT," + // 7: level
                "\"CONFIRM\" TEXT," + // 8: confirm
                "\"SEX\" TEXT," + // 9: sex
                "\"BIRTHDAY\" TEXT," + // 10: birthday
                "\"VIDEO\" TEXT," + // 11: video
                "\"TAGS\" TEXT," + // 12: tags
                "\"RECENT_BLOG_DS\" TEXT," + // 13: recentBlogDs
                "\"MSG_PRICE\" TEXT," + // 14: msgPrice
                "\"SPENDED_MONEY\" TEXT," + // 15: spendedMoney
                "\"RECIVED_MONEY\" TEXT," + // 16: recivedMoney
                "\"CREATE_DATA\" INTEGER);"); // 17: createData
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Integer _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getID());
 
        String nike = entity.getNike();
        if (nike != null) {
            stmt.bindString(3, nike);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(4, des);
        }
 
        String headImage = entity.getHeadImage();
        if (headImage != null) {
            stmt.bindString(5, headImage);
        }
 
        String backImage = entity.getBackImage();
        if (backImage != null) {
            stmt.bindString(6, backImage);
        }
 
        String exp = entity.getExp();
        if (exp != null) {
            stmt.bindString(7, exp);
        }
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(8, level);
        }
 
        String confirm = entity.getConfirm();
        if (confirm != null) {
            stmt.bindString(9, confirm);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(12, video);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(13, tags);
        }
 
        String recentBlogDs = entity.getRecentBlogDs();
        if (recentBlogDs != null) {
            stmt.bindString(14, recentBlogDs);
        }
 
        String msgPrice = entity.getMsgPrice();
        if (msgPrice != null) {
            stmt.bindString(15, msgPrice);
        }
 
        String spendedMoney = entity.getSpendedMoney();
        if (spendedMoney != null) {
            stmt.bindString(16, spendedMoney);
        }
 
        String recivedMoney = entity.getRecivedMoney();
        if (recivedMoney != null) {
            stmt.bindString(17, recivedMoney);
        }
 
        java.util.Date createData = entity.getCreateData();
        if (createData != null) {
            stmt.bindLong(18, createData.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // _id
            cursor.getString(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nike
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // des
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headImage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // backImage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // exp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // level
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // confirm
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sex
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // birthday
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // video
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // tags
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // recentBlogDs
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // msgPrice
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // spendedMoney
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // recivedMoney
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)) // createData
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setID(cursor.getString(offset + 1));
        entity.setNike(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDes(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBackImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExp(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLevel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setConfirm(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBirthday(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVideo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTags(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRecentBlogDs(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMsgPrice(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSpendedMoney(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRecivedMoney(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCreateData(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(UserEntity entity, long rowId) {
        return entity.get_id();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(UserEntity entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
